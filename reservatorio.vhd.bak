-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- Generated by Quartus Prime Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition
-- Created on Mon Apr 26 16:47:12 2021

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY reservatorio IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        a : IN STD_LOGIC := '0';
        b : IN STD_LOGIC := '0';
        c : IN STD_LOGIC := '0';
        d : IN STD_LOGIC := '0';
        B1 : OUT STD_LOGIC;
        B2 : OUT STD_LOGIC;
        V : OUT STD_LOGIC;
        L1 : OUT STD_LOGIC;
        L2 : OUT STD_LOGIC
    );
END reservatorio;

ARCHITECTURE BEHAVIOR OF reservatorio IS
    TYPE type_fstate IS (VZ,nivelB,nivelC,nivelD,nivelA,ER);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,a,b,c,d)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= VZ;
            B1 <= '0';
            B2 <= '0';
            V <= '0';
            L1 <= '0';
            L2 <= '0';
        ELSE
            B1 <= '0';
            B2 <= '0';
            V <= '0';
            L1 <= '0';
            L2 <= '0';
            CASE fstate IS
                WHEN VZ =>
                    IF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSIF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '0';

                    V <= '1';

                    L1 <= '1';

                    B1 <= '0';

                    B2 <= '0';
                WHEN nivelB =>
                    IF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSIF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '0';

                    V <= '1';

                    L1 <= '0';

                    B1 <= '1';

                    B2 <= '1';
                WHEN nivelC =>
                    IF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '0';

                    V <= '1';

                    L1 <= '1';

                    B1 <= '1';

                    B2 <= '0';
                WHEN nivelD =>
                    IF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '0';

                    V <= '1';

                    L1 <= '1';

                    B1 <= '0';

                    B2 <= '0';
                WHEN nivelA =>
                    IF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '0';

                    V <= '0';

                    L1 <= '0';

                    B1 <= '1';

                    B2 <= '1';
                WHEN ER =>
                    IF (((((a = '0') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelB;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelC;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '1'))) THEN
                        reg_fstate <= nivelD;
                    ELSIF (((((a = '1') AND (b = '1')) AND (c = '1')) AND (d = '1'))) THEN
                        reg_fstate <= nivelA;
                    ELSIF (((((a = '0') AND (b = '0')) AND (c = '0')) AND (d = '0'))) THEN
                        reg_fstate <= VZ;
                    ELSE
                        reg_fstate <= ER;
                    END IF;

                    L2 <= '1';

                    V <= '0';

                    L1 <= '0';

                    B1 <= '0';

                    B2 <= '0';
                WHEN OTHERS => 
                    B1 <= 'X';
                    B2 <= 'X';
                    V <= 'X';
                    L1 <= 'X';
                    L2 <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
